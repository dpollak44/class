{"version":3,"sources":["AddComment.js","Comment.js","Post.js","Posts.js","AddPost.js","Header.js","Login.js","Logout.js","Authentication.js","App.js","serviceWorker.js","index.js"],"names":["AddComment","addComment","a","fetch","props","id","method","headers","body","JSON","stringify","content","refs","value","resp","ok","console","error","statusText","complete","onComplete","ref","onClick","this","Component","comment","className","author","Date","date","toLocaleString","Post","state","setState","addingComment","commentComplete","post","addCommentButton","_id","comments","map","c","i","key","title","Posts","posts","p","json","socket","io","on","commentData","index","findIndex","postId","push","close","AddPost","handleInputChange","event","target","type","checked","name","handleSubmit","e","preventDefault","history","onSubmit","onChange","to","Login","handleLogin","onLogin","password","handleRegister","onRegister","placeholder","user","onLogout","Authentication","register","log","login","logout","loginLogout","Logout","App","path","exact","component","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.59f970b7.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './AddComment.css';\r\n\r\nexport default class AddComment extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"addComment\">\r\n        <textarea ref=\"content\"></textarea>\r\n        <button onClick={this.addComment}>add comment</button>\r\n        <button onClick={this.complete}>cancel</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  addComment = async () => {\r\n    try {\r\n      const resp = await fetch(`/posts/${this.props.id}/comments`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ content: this.refs.content.value })\r\n      });\r\n\r\n      if (!resp.ok) {\r\n        return console.error(resp.statusText);\r\n      }\r\n      this.complete();\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n\r\n  complete = () => {\r\n    this.props.onComplete();\r\n  }\r\n}","import React from 'react';\r\nimport './Comment.css';\r\n\r\nexport default ({ comment }) => {\r\n  return (\r\n    <div className=\"comment\">\r\n      <h3>{comment.content}</h3>\r\n      <h4>by {comment.author} on {new Date(comment.date).toLocaleString()}</h4>\r\n    </div>\r\n  );\r\n}","import React, { Component } from 'react';\r\nimport './Post.css';\r\nimport AddComment from './AddComment';\r\nimport Comment from './Comment';\r\n\r\nexport default class Post extends Component {\r\n  state = {};\r\n\r\n  render() {\r\n    const { post } = this.props;\r\n\r\n    const addCommentButton = this.state.addingComment ?\r\n      null :\r\n      <button className=\"addComment\" onClick={this.addComment}>add comment</button>;\r\n\r\n    const addComment = this.state.addingComment ?\r\n      <AddComment onComplete={this.commentComplete} id={post._id} /> :\r\n      null;\r\n\r\n    const comments = post.comments\r\n      ? post.comments.map((c, i) => <Comment key={i} comment={c} />)\r\n      : null;\r\n\r\n    return (\r\n      <div className=\"post\" id={post._id}>\r\n        <h2>{post.title}</h2>\r\n        <h3>by {post.author} on {new Date(post.date).toLocaleString()}</h3>\r\n        <div>{post.content}</div>\r\n\r\n        <div className=\"comments\">\r\n          {addCommentButton}\r\n          {addComment}\r\n          {comments}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  addComment = () => {\r\n    this.setState({\r\n      addingComment: !this.state.addingComment\r\n    });\r\n  }\r\n\r\n  commentComplete = () => {\r\n    this.setState({\r\n      addingComment: false\r\n    });\r\n  }\r\n}","import React, { Component } from 'react'\r\nimport Post from './Post';\r\nimport io from 'socket.io-client';\r\n\r\nexport default class Posts extends Component {\r\n  state = {\r\n    posts: []\r\n  };\r\n\r\n  render() {\r\n    const posts = this.state.posts.map(p => <Post key={p._id} post={p} />);\r\n    return (\r\n      <>\r\n        {posts}\r\n      </>\r\n    );\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const resp = await fetch('/posts');\r\n      if (!resp.ok) {\r\n        return console.error(resp.statusText)\r\n      }\r\n      const posts = await resp.json();\r\n      this.setState({\r\n        posts\r\n      });\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    this.socket = io('http://localhost');\r\n    this.socket.on('comment', commentData => {\r\n      const posts = [...this.state.posts];\r\n      const index = posts.findIndex(p => p._id === commentData.postId);\r\n      const post = posts[index] = { ...posts[index] };\r\n      post.comments = post.comments || [];\r\n      post.comments.push(commentData.comment);\r\n\r\n      this.setState({\r\n        posts\r\n      });\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.socket.close();\r\n  }\r\n}","import React, { Component } from 'react'\r\nimport './AddPost.css';\r\n\r\nexport default class AddPost extends Component {\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  handleSubmit = async e => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const resp = await fetch(`/posts`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ title: this.state.title, content: this.state.content })\r\n      });\r\n\r\n      if (!resp.ok) {\r\n        return console.error(resp.statusText);\r\n      }\r\n\r\n      this.props.history.push('/');\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form id=\"addPost\" onSubmit={this.handleSubmit}>\r\n        <label>Title:\r\n          <input name=\"title\" onChange={this.handleInputChange} />\r\n        </label>\r\n        <label>Content:\r\n          <textarea name=\"content\" onChange={this.handleInputChange}></textarea>\r\n        </label>\r\n        <button>Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './Header.css';\r\n\r\nexport default () => {\r\n  return (\r\n    <header>\r\n      <h1>PCS Mongo React Socket IO Blog</h1>\r\n      <h2>Welcome to the blog!</h2>\r\n      <NavLink to=\"/\">Home</NavLink> | <NavLink to=\"/addPost\">Add Post</NavLink>\r\n    </header>\r\n  );\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Login extends Component {\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input ref=\"name\" placeholder=\"name\" />\r\n        <input type=\"password\" ref=\"password\" placeholder=\"password\" />\r\n        <button onClick={this.handleLogin}>login</button>\r\n        <button onClick={this.handleRegister}>register</button>\r\n      </form>\r\n    );\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n  }\r\n\r\n  handleLogin = () => {\r\n    this.props.onLogin(this.refs.name.value, this.refs.password.value);\r\n  }\r\n\r\n  handleRegister = () => {\r\n    this.props.onRegister(this.refs.name.value, this.refs.password.value);\r\n  }\r\n}","import React from 'react';\r\n\r\nexport default props => {\r\n  return (\r\n    <>\r\n      Logged in as {props.user} <button onClick={props.onLogout}>logout</button>\r\n    </>\r\n  );\r\n}","import React, { Component } from 'react';\r\nimport Login from './Login';\r\nimport Logout from './Logout';\r\nimport './Authentication.css';\r\n\r\nexport default class Authentication extends Component {\r\n  state = {}\r\n\r\n  render() {\r\n    const loginLogout = this.state.user ?\r\n      <Logout user={this.state.user} onLogout={this.logout} /> :\r\n      <Login onLogin={this.login} onRegister={this.register} />\r\n\r\n    return (\r\n      <div className=\"authenticate\">\r\n        {loginLogout}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  register = () => {\r\n    console.log('would register here');\r\n  }\r\n\r\n  login = async (user, password) => {\r\n    try {\r\n      const resp = await fetch(`/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ user, password })\r\n      });\r\n\r\n      if (!resp.ok) {\r\n        return console.error(resp.statusText);\r\n      }\r\n      this.setState({\r\n        user\r\n      });\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n\r\n  logout = async () => {\r\n    try {\r\n      const resp = await fetch(`/logout`);\r\n\r\n      if (!resp.ok) {\r\n        return console.error(resp.statusText);\r\n      }\r\n\r\n      this.setState({\r\n        user: null\r\n      });\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport Posts from './Posts';\nimport AddPost from './AddPost';\nimport Header from './Header';\nimport Authentication from './Authentication';\n\nfunction App() {\n  return (\n    <>\n      <Authentication />\n      <Header />\n\n      <Switch>\n        <Route path=\"/\" exact component={Posts} />\n        <Route path=\"/addPost\" exact component={AddPost} />\n        <Route render={props => <div className=\"error\">404. No such page</div>} />\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter>\n  <App />\n</BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}